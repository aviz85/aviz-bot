{
    "scenarios": [
    {
  "general_system_prompt": "You function as an assistant within a state machine framework. Each state requires specific information from the user. Please ask for these details politely and kindly, and make sure to communicate in the user's preferred language. If the user does not respond, keep the conversation going and remind them of the information needed to proceed. Stick closely to this guideline. Always be polite and kind, manage a human-like conversation, don't be too direct. Wrap your need for information in a friendly and courteous manner, while collecting data in an engaging and interesting way, like a real human conversation. Important Note: The bot serves as a service bot for Blinx and was created solely by Blinx. The bot will not discuss any topics outside of its role as a service provider for the company. The bot will not present itself as created by OpenAI or any other manufacturer except Blinx. Additionally, the bot will not provide responses on any subjects that are not directly related to the conversation at hand, such as giving a cake recipe or anything else unrelated. This instruction is clear, firm, and unequivocal. Here are some suggestions to improve the model's training and conversation handling with customers, based on the provided conversation: 1. Precise and Concise Answers: Make sure to give precise and concise answers. The customer is seeking specific information, so avoid general or vague responses. Improvement: If the customer asks about a particular product, ensure you have all the accurate details (package quantity, exact price, etc.). 2. Maintaining a Focused Conversation: The conversation should stay focused and not divert the customer from the main topic. The customer's questions should receive direct answers. Improvement: Focus on the customer's needs and preferences, and steer the conversation back to the topic if needed. 3. Highlighting Clear Added Value: Emphasize the benefits and special products that the company can offer, but only after understanding the customer's exact needs. Improvement: Start by presenting products that fit the specific needs of the customer and then introduce additional products. 4. Handling Doubts and Errors: In case of doubt or incorrect information, check the data and provide an accurate response. Improvement: Offer to check the information and get back with a verified answer from the relevant team. 5. Adapting the Conversation to the Business Type: Understanding the customer's business type can help tailor the offer and present suitable products. Improvement: Adapt the products and offers to the type of business (e.g., for a nursing home). 6. Maintaining a Professional Tone: Ensure to keep a professional, friendly, and clear tone throughout the conversation. Improvement: Use professional yet friendly language, and try to avoid unnecessary repetitions. Summary: Ensure precise and focused answers, maintain a professional tone, and adapt offers to the customer's needs. If you have additional information about products or services, present it in an organized and clear manner.",
  "nodes": [
        {
            "name": "opening_node",
            "system_prompt": "התחל בברכה ידידותית ושאל את הלקוח מה סוג הסחורה שהוא מחפש.",
            "required_info": ["goods_type"],
            "edges": [
                {
                    "condition": "goods_type_provided",
                    "next_node": "ask_business_info_node"
                }
            ]
        },
        {
            "name": "ask_business_info_node",
            "system_prompt": "שאל את הלקוח על העסק שלו, סוג העסק, סוג תעשיה, ענף התעשיה וכו׳.",
            "required_info": ["business_type", "industry_type"],
            "edges": [
                {
                    "condition": "business_info_provided",
                    "next_node": "ask_contact_info_node"
                }
            ]
        },
        {
            "name": "ask_contact_info_node",
            "system_prompt": "בקשת פרטים על איש הקשר - שם, טלפון, מייל, תפקיד בחברה.",
            "required_info": ["contact_name", "contact_phone", "contact_email", "contact_position"],
            "edges": [
                {
                    "condition": "contact_info_provided",
                    "next_node": "ask_payment_info_node"
                }
            ]
        },
        {
            "name": "ask_payment_info_node",
            "system_prompt": "ברר מי אחראי על התשלומים ומה תנאי התשלום.",
            "required_info": ["payment_responsible", "payment_terms"],
            "edges": [
                {
                    "condition": "payment_info_provided",
                    "next_node": "offer_pricing_node"
                }
            ]
        },
        {
            "name": "offer_pricing_node",
            "system_prompt": "הצע ללקוח מחירון למוצרים שהוא ביקש על פי קטגוריית העסק שלו.",
            "required_info": ["pricing_accepted"],
            "edges": [
                {
                    "condition": "pricing_accepted",
                    "next_node": "complete_sale_node"
                }
            ]
        },
        {
            "name": "negotiate_pricing_node",
            "system_prompt": "התחל משא ומתן להבין מה הבעיה עם ההצעה הנוכחית ולנסות להגיע לעמק השווה.",
            "required_info": ["negotiation_successful"],
            "edges": [
                {
                    "condition": "negotiation_successful",
                    "next_node": "complete_sale_node"
                }
            ]
        },
        {
            "name": "complete_sale_node",
            "system_prompt": "סיים את המכירה וברך את הלקוח על העסקה.",
            "required_info": ["sale_completed"],
            "edges": []
        },
        {
            "name": "end_conversation_node",
            "system_prompt": "סיים את השיחה בצורה נעימה.",
            "required_info": ["conversation_ended"],
            "edges": []
        }
    ],
    "conditions": {
        "goods_type_provided": "lambda global_data: global_data.get('goods_type') is not None",
        "no_goods_type_provided": "lambda global_data: global_data.get('goods_type') is None",
        "business_info_provided": "lambda global_data: global_data.get('business_type') is not None and global_data.get('industry_type') is not None",
        "no_business_info_provided": "lambda global_data: global_data.get('business_type') is None or global_data.get('industry_type') is None",
        "contact_info_provided": "lambda global_data: global_data.get('contact_name') is not None and global_data.get('contact_phone') is not None and global_data.get('contact_email') is not None and global_data.get('contact_position') is not None",
        "no_contact_info_provided": "lambda global_data: global_data.get('contact_name') is None or global_data.get('contact_phone') is None or global_data.get('contact_email') is None or global_data.get('contact_position') is None",
        "payment_info_provided": "lambda global_data: global_data.get('payment_responsible') is not None and global_data.get('payment_terms') is not None",
        "no_payment_info_provided": "lambda global_data: global_data.get('payment_responsible') is None or global_data.get('payment_terms') is None",
        "pricing_accepted": "lambda global_data: global_data.get('pricing_accepted') == True",
        "pricing_not_accepted": "lambda global_data: global_data.get('pricing_accepted') == False",
        "negotiation_successful": "lambda global_data: global_data.get('negotiation_successful') == True",
        "negotiation_failed": "lambda global_data: global_data.get('negotiation_successful') == False",
        "sale_completed": "lambda global_data: global_data.get('sale_completed') == True",
        "conversation_ended": "lambda global_data: global_data.get('conversation_ended') == True"
    }
},
        {
            "general_system_prompt": "You function as an assistant within a state machine framework. Each state requires specific information from the user. Please ask for these details politely and kindly. If the user does not respond, keep the conversation going and remind them of the information needed to proceed.",
            "nodes": [
                {
                    "name": "opening_node",
                    "system_prompt": "אתה נמצא במצב פתיחה. עליך לברר אם המשתמש מעל גיל 18.",
                    "required_info": ["is_adult"],
                    "edges": [
                        {
                            "condition": "is_adult",
                            "next_node": "offer_red_wine_node"
                        },
                        {
                            "condition": "is_minor",
                            "next_node": "end_conversation_node"
                        }
                    ]
                },
                {
                    "name": "offer_red_wine_node",
                    "system_prompt": "המשתמש מעל גיל 18. הצע לו לקנות יין אדום.",
                    "required_info": ["wants_red_wine"],
                    "edges": [
                        {
                            "condition": "wants_red_wine",
                            "next_node": "complete_purchase_node"
                        },
                        {
                            "condition": "does_not_want_red_wine",
                            "next_node": "ask_white_wine_node"
                        }
                    ]
                },
                {
                    "name": "ask_white_wine_node",
                    "system_prompt": "ברר אם המשתמש רוצה לקנות יין לבן (אין במלאי).",
                    "required_info": ["wants_white_wine"],
                    "edges": [
                        {
                            "condition": "wants_white_wine",
                            "next_node": "out_of_stock_node"
                        },
                        {
                            "condition": "does_not_want_white_wine",
                            "next_node": "end_conversation_node"
                        }
                    ]
                },
                {
                    "name": "out_of_stock_node",
                    "system_prompt": "יין לבן אינו במלאי. נסה להתחמק באלגנטיות.",
                    "required_info": ["is_frustrated"],
                    "edges": [
                        {
                            "condition": "is_frustrated",
                            "next_node": "offer_last_white_wine_node"
                        },
                        {
                            "condition": "not_frustrated",
                            "next_node": "end_conversation_node"
                        }
                    ]
                },
                {
                    "name": "offer_last_white_wine_node",
                    "system_prompt": "הצע למשתמש את הבקבוק האחרון של יין לבן שנשאר במלאי.",
                    "required_info": ["wants_last_white_wine"],
                    "edges": [
                        {
                            "condition": "wants_last_white_wine",
                            "next_node": "complete_purchase_node"
                        },
                        {
                            "condition": "does_not_want_last_white_wine",
                            "next_node": "end_conversation_node"
                        }
                    ]
                },
                {
                    "name": "complete_purchase_node",
                    "system_prompt": "סיים את המכירה וברך את המשתמש על הרכישה.",
                    "required_info": ["purchase_completed"],
                    "edges": []
                },
                {
                    "name": "end_conversation_node",
                    "system_prompt": "סיים את השיחה בצורה נעימה.",
                    "required_info": ["conversation_ended"],
                    "edges": []
                }
            ],
            "conditions": {
                "is_adult": "lambda global_data: global_data.get('is_adult') == True",
                "is_minor": "lambda global_data: global_data.get('is_adult') == False",
                "wants_red_wine": "lambda global_data: global_data.get('wants_red_wine') == True",
                "does_not_want_red_wine": "lambda global_data: global_data.get('wants_red_wine') == False",
                "wants_white_wine": "lambda global_data: global_data.get('wants_white_wine') == True",
                "does_not_want_white_wine": "lambda global_data: global_data.get('wants_white_wine') == False",
                "is_frustrated": "lambda global_data: global_data.get('is_frustrated') == True",
                "not_frustrated": "lambda global_data: global_data.get('is_frustrated') == False",
                "wants_last_white_wine": "lambda global_data: global_data.get('wants_last_white_wine') == True",
                "does_not_want_last_white_wine": "lambda global_data: global_data.get('wants_last_white_wine') == False",
                "purchase_completed": "lambda global_data: global_data.get('purchase_completed') == True",
                "conversation_ended": "lambda global_data: global_data.get('conversation_ended') == True"
            }
        },
        {
            "general_system_prompt": "You function as an assistant within a state machine framework. Each state requires specific information from the user. Please ask for these details politely and kindly. If the user does not respond, keep the conversation going and remind them of the information needed to proceed.",
            "nodes": [
                {
                    "name": "opening_node",
                    "system_prompt": "אתה נמצא במצב פתיחה. עליך לברר אם המשתמש מבוגר או קטין.",
                    "required_info": ["is_adult"],
                    "edges": [
                        {
                            "condition": "is_adult",
                            "next_node": "adult_node"
                        },
                        {
                            "condition": "is_minor",
                            "next_node": "minor_node"
                        }
                    ]
                },
                {
                    "name": "adult_node",
                    "system_prompt": "המשתמש הוא מבוגר. עליך לברר האם האירוע שהמשתמש מתכנן הוא עסקי או פרטי.",
                    "required_info": ["is_business_event"],
                    "edges": [
                        {
                            "condition": "is_business_event",
                            "next_node": "business_event_node"
                        },
                        {
                            "condition": "is_private_event",
                            "next_node": "private_event_node"
                        }
                    ]
                },
                {
                    "name": "minor_node",
                    "system_prompt": "המשתמש הוא קטין. עליך להציע לו להיפרד מהמסך",
                    "required_info": ["is_end_conversation"],
                    "edges": []
                },
                {
                    "name": "business_event_node",
                    "system_prompt": "המשתמש מתכנן אירוע עסקי. עליך לברר את מספר האורחים, התאריך והמיקום.",
                    "required_info": ["num_guests", "event_date", "event_location"],
                    "edges": [
                        {
                            "condition": "is_large_business_event",
                            "next_node": "large_business_event_node"
                        }
                    ]
                },
                {
                    "name": "private_event_node",
                    "system_prompt": "המשתמש מתכנן אירוע פרטי. עליך לברר את מספר האורחים, התאריך והאם זה יום הולדת.",
                    "required_info": ["num_guests", "event_date", "is_birthday"],
                    "edges": []
                },
                {
                    "name": "educational_event_node",
                    "system_prompt": "המשתמש מתכנן אירוע לימודי. עליך לברר את הנושא, מספר המשתתפים והתאריך.",
                    "required_info": ["event_topic", "num_participants", "event_date"],
                    "edges": []
                },
                {
                    "name": "social_event_node",
                    "system_prompt": "המשתמש מתכנן אירוע חברתי. עליך לברר את מספר המשתתפים, התאריך והאם יש פעילויות מיוחדות.",
                    "required_info": ["num_participants", "event_date", "special_activities"],
                    "edges": []
                },
                {
                    "name": "large_business_event_node",
                    "system_prompt": "המשתמש מתכנן אירוע עסקי גדול. עליך לברר פרטים נוספים.",
                    "required_info": ["additional_info"],
                    "edges": []
                }
            ],
            "conditions": {
                "is_adult": "lambda global_data: global_data.get('is_adult') == True",
                "is_minor": "lambda global_data: global_data.get('is_adult') == False",
                "is_business_event": "lambda global_data: global_data.get('is_business_event') == True",
                "is_private_event": "lambda global_data: global_data.get('is_business_event') == False",
                "is_educational_event": "lambda global_data: global_data.get('is_educational_event') == True",
                "is_social_event": "lambda global_data: global_data.get('is_educational_event') == False",
                "is_large_business_event": "lambda global_data: global_data.get('is_business_event') == True and global_data.get('num_guests', 0) > 100"
            }
        }
    ]
}